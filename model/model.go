// Code generated by protoc-gen-gogo. DO NOT EDIT.

// Copyright (c) 2025 The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0

// source: model.proto

package model

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	jaegerIdlModel "github.com/jaegertracing/jaeger-idl/model/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
	_ = time.Kitchen
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValueType = jaegerIdlModel.ValueType

const (
	ValueType_STRING  ValueType = jaegerIdlModel.ValueType_STRING
	ValueType_BOOL    ValueType = jaegerIdlModel.ValueType_BOOL
	ValueType_INT64   ValueType = jaegerIdlModel.ValueType_INT64
	ValueType_FLOAT64 ValueType = jaegerIdlModel.ValueType_FLOAT64
	ValueType_BINARY  ValueType = jaegerIdlModel.ValueType_BINARY
)

var ValueType_name = jaegerIdlModel.ValueType_name

var ValueType_value = jaegerIdlModel.ValueType_value

type SpanRefType = jaegerIdlModel.SpanRefType

const (
	SpanRefType_CHILD_OF     SpanRefType = jaegerIdlModel.SpanRefType_CHILD_OF
	SpanRefType_FOLLOWS_FROM SpanRefType = jaegerIdlModel.SpanRefType_FOLLOWS_FROM
)

var SpanRefType_name = jaegerIdlModel.SpanRefType_name

var SpanRefType_value = jaegerIdlModel.SpanRefType_value

type KeyValue = jaegerIdlModel.KeyValue

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

type Log = jaegerIdlModel.Log

var xxx_messageInfo_Log proto.InternalMessageInfo

type SpanRef = jaegerIdlModel.SpanRef

var xxx_messageInfo_SpanRef proto.InternalMessageInfo

type Process = jaegerIdlModel.Process

var xxx_messageInfo_Process proto.InternalMessageInfo

type Span = jaegerIdlModel.Span

var xxx_messageInfo_Span proto.InternalMessageInfo

type Trace = jaegerIdlModel.Trace

var xxx_messageInfo_Trace proto.InternalMessageInfo

type Trace_ProcessMapping = jaegerIdlModel.Trace_ProcessMapping

var xxx_messageInfo_Trace_ProcessMapping proto.InternalMessageInfo

// Note that both Span and Batch may contain a Process.
// This is different from the Thrift model which was only used
// for transport, because Proto model is also used by the backend
// as the domain model, where once a batch is received it is split
// into individual spans which are all processed independently,
// and therefore they all need a Process. As far as on-the-wire
// semantics, both Batch and Spans in the same message may contain
// their own instances of Process, with span.Process taking priority
// over batch.Process.
type Batch = jaegerIdlModel.Batch

var xxx_messageInfo_Batch proto.InternalMessageInfo

type DependencyLink = jaegerIdlModel.DependencyLink

var xxx_messageInfo_DependencyLink proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("jaeger.api_v2.ValueType", ValueType_name, ValueType_value)
	proto.RegisterEnum("jaeger.api_v2.SpanRefType", SpanRefType_name, SpanRefType_value)
	proto.RegisterType((*KeyValue)(nil), "jaeger.api_v2.KeyValue")
	proto.RegisterType((*Log)(nil), "jaeger.api_v2.Log")
	proto.RegisterType((*SpanRef)(nil), "jaeger.api_v2.SpanRef")
	proto.RegisterType((*Process)(nil), "jaeger.api_v2.Process")
	proto.RegisterType((*Span)(nil), "jaeger.api_v2.Span")
	proto.RegisterType((*Trace)(nil), "jaeger.api_v2.Trace")
	proto.RegisterType((*Trace_ProcessMapping)(nil), "jaeger.api_v2.Trace.ProcessMapping")
	proto.RegisterType((*Batch)(nil), "jaeger.api_v2.Batch")
	proto.RegisterType((*DependencyLink)(nil), "jaeger.api_v2.DependencyLink")
}

func init() { proto.RegisterFile("model.proto", fileDescriptor_4c16552f9fdb66d8) }

var fileDescriptor_4c16552f9fdb66d8 = []byte{
	// 957 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xc1, 0x6f, 0xe3, 0xc4,
	0x17, 0xee, 0x24, 0x76, 0x6c, 0xbf, 0xa4, 0x55, 0x34, 0xbb, 0xbf, 0xad, 0x37, 0x3f, 0xd1, 0x84,
	0xac, 0x90, 0xc2, 0xaa, 0xa4, 0x6c, 0xd9, 0xed, 0x01, 0x21, 0xa1, 0x75, 0x4b, 0xc0, 0x90, 0x36,
	0x68, 0x5a, 0x81, 0xe0, 0x62, 0x4d, 0x9d, 0x89, 0xd7, 0xbb, 0x8e, 0xc7, 0xb2, 0x1d, 0xa3, 0xdc,
	0xf8, 0x13, 0x10, 0x27, 0x8e, 0x70, 0xe5, 0x2f, 0xd9, 0x23, 0x07, 0x4e, 0x48, 0x14, 0xd4, 0xd3,
	0xfe, 0x19, 0x68, 0xc6, 0xe3, 0x74, 0x1b, 0x56, 0xd0, 0xbd, 0x70, 0xca, 0xbc, 0x99, 0xef, 0x7b,
	0xf3, 0xde, 0xf7, 0xbe, 0x89, 0xa1, 0x39, 0xe7, 0x53, 0x16, 0x0d, 0x93, 0x94, 0xe7, 0x1c, 0x6f,
	0x3e, 0xa5, 0x2c, 0x60, 0xe9, 0x90, 0x26, 0xa1, 0x57, 0xec, 0x77, 0x6e, 0x07, 0x3c, 0xe0, 0xf2,
	0x64, 0x4f, 0xac, 0x4a, 0x50, 0xa7, 0x1b, 0x70, 0x1e, 0x44, 0x6c, 0x4f, 0x46, 0xe7, 0x8b, 0xd9,
	0x5e, 0x1e, 0xce, 0x59, 0x96, 0xd3, 0x79, 0xa2, 0x00, 0x3b, 0xeb, 0x80, 0xe9, 0x22, 0xa5, 0x79,
	0xc8, 0xe3, 0xf2, 0xbc, 0xff, 0x2b, 0x02, 0xf3, 0x33, 0xb6, 0xfc, 0x82, 0x46, 0x0b, 0x86, 0xdb,
	0x50, 0x7f, 0xc6, 0x96, 0x36, 0xea, 0xa1, 0x81, 0x45, 0xc4, 0x12, 0xef, 0x41, 0xa3, 0xf0, 0xf2,
	0x65, 0xc2, 0xec, 0x5a, 0x0f, 0x0d, 0xb6, 0xf6, 0xed, 0xe1, 0xb5, 0xaa, 0x86, 0x92, 0x77, 0xb6,
	0x4c, 0x18, 0xd1, 0x0b, 0xf1, 0x83, 0x6f, 0x81, 0x5e, 0x78, 0x59, 0x9e, 0xda, 0x75, 0x99, 0x44,
	0x2b, 0x4e, 0xf3, 0x14, 0xff, 0x4f, 0x64, 0x39, 0xe7, 0x3c, 0xb2, 0xb5, 0x1e, 0x1a, 0x98, 0x44,
	0x2f, 0x1c, 0xce, 0x23, 0xbc, 0x0d, 0x46, 0xe1, 0x85, 0x71, 0x7e, 0xf0, 0xd0, 0xd6, 0x7b, 0x68,
	0x50, 0x27, 0x8d, 0xc2, 0x15, 0x11, 0xfe, 0x3f, 0x58, 0x85, 0x37, 0x8b, 0x38, 0x15, 0x47, 0x8d,
	0x1e, 0x1a, 0x20, 0x62, 0x16, 0xa3, 0x32, 0xc6, 0x77, 0xc1, 0x2c, 0xbc, 0xf3, 0x30, 0xa6, 0xe9,
	0xd2, 0x36, 0x7a, 0x68, 0xd0, 0x22, 0x46, 0xe1, 0xc8, 0xf0, 0x7d, 0xf3, 0xc5, 0x8f, 0x5d, 0xf4,
	0xe2, 0xa7, 0x2e, 0xea, 0x7f, 0x8b, 0xa0, 0x3e, 0xe6, 0x01, 0x76, 0xc0, 0x5a, 0x29, 0x22, 0xfb,
	0x6a, 0xee, 0x77, 0x86, 0xa5, 0x24, 0xc3, 0x4a, 0x92, 0xe1, 0x59, 0x85, 0x70, 0xcc, 0xe7, 0x17,
	0xdd, 0x8d, 0xef, 0xfe, 0xe8, 0x22, 0x72, 0x45, 0xc3, 0x8f, 0xa0, 0x31, 0x0b, 0x59, 0x34, 0xcd,
	0xec, 0x5a, 0xaf, 0x3e, 0x68, 0xee, 0x6f, 0xaf, 0x69, 0x50, 0xc9, 0xe7, 0x68, 0x82, 0x4d, 0x14,
	0xb8, 0xff, 0x33, 0x02, 0xe3, 0x34, 0xa1, 0x31, 0x61, 0x33, 0xfc, 0x08, 0xcc, 0x3c, 0xa5, 0x3e,
	0xf3, 0xc2, 0xa9, 0xac, 0xa2, 0xe5, 0x74, 0x04, 0xf6, 0xb7, 0x8b, 0xae, 0x71, 0x26, 0xf6, 0xdd,
	0xa3, 0xcb, 0xab, 0x25, 0x31, 0x24, 0xd6, 0x9d, 0xe2, 0x07, 0x60, 0x64, 0x09, 0x8d, 0x05, 0xab,
	0x26, 0x59, 0xb6, 0x62, 0x35, 0x44, 0x62, 0x49, 0x52, 0x2b, 0xd2, 0x10, 0x40, 0x77, 0x2a, 0x6e,
	0x4a, 0xd9, 0xac, 0x1c, 0x59, 0x5d, 0x8e, 0xac, 0xb3, 0x56, 0xae, 0xaa, 0x49, 0x0e, 0xcd, 0x48,
	0xcb, 0x45, 0xdf, 0x03, 0xe3, 0xf3, 0x94, 0xfb, 0x2c, 0xcb, 0xf0, 0x9b, 0xd0, 0xca, 0x58, 0x5a,
	0x84, 0x3e, 0xf3, 0x62, 0x3a, 0x67, 0xca, 0x0d, 0x4d, 0xb5, 0x77, 0x42, 0xe7, 0x0c, 0x3f, 0x00,
	0x2d, 0xa7, 0xc1, 0x0d, 0xf5, 0x90, 0xd0, 0xfe, 0xef, 0x1a, 0x68, 0xe2, 0xe6, 0xff, 0x50, 0x8a,
	0xb7, 0x60, 0x8b, 0x27, 0xac, 0x74, 0x7b, 0xd9, 0x4a, 0xe9, 0xc9, 0xcd, 0xd5, 0xae, 0x6c, 0xe6,
	0x03, 0x80, 0x94, 0xcd, 0x58, 0xca, 0x62, 0x9f, 0x65, 0xb6, 0x26, 0x5b, 0xba, 0xf3, 0x6a, 0xcd,
	0x54, 0x47, 0x2f, 0xe1, 0xf1, 0x3d, 0xd0, 0x67, 0x91, 0xd0, 0x42, 0x38, 0x78, 0xd3, 0xd9, 0x54,
	0x55, 0xe9, 0x23, 0xb1, 0x49, 0xca, 0x33, 0x7c, 0x08, 0x90, 0xe5, 0x34, 0xcd, 0x3d, 0x61, 0x2a,
	0x69, 0xe8, 0x1b, 0xdb, 0x50, 0xf2, 0xc4, 0x09, 0xfe, 0x10, 0xcc, 0xea, 0xed, 0x4a, 0xdf, 0x37,
	0xf7, 0xef, 0xfe, 0x2d, 0xc5, 0x91, 0x02, 0x94, 0x19, 0x7e, 0x10, 0x19, 0x56, 0xa4, 0xd5, 0xd4,
	0xcc, 0x1b, 0x4f, 0x0d, 0xef, 0x82, 0x16, 0xf1, 0x20, 0xb3, 0x2d, 0x49, 0xc1, 0x6b, 0x94, 0x31,
	0x0f, 0x2a, 0xb4, 0x40, 0xe1, 0x77, 0xc1, 0x48, 0x4a, 0x13, 0xd9, 0x20, 0x0b, 0x5c, 0x97, 0x51,
	0x59, 0x8c, 0x54, 0x30, 0xbc, 0x0b, 0xa0, 0x96, 0x62, 0xb0, 0x4d, 0x31, 0x1e, 0x67, 0xf3, 0xf2,
	0xa2, 0x6b, 0x29, 0xa4, 0x7b, 0x44, 0x2c, 0x05, 0x70, 0xa7, 0xb8, 0x03, 0xe6, 0x37, 0x34, 0x8d,
	0xc3, 0x38, 0xc8, 0xec, 0x56, 0xaf, 0x3e, 0xb0, 0xc8, 0x2a, 0xee, 0x7f, 0x5f, 0x03, 0x5d, 0x9a,
	0x06, 0xbf, 0x0d, 0xba, 0x30, 0x40, 0x66, 0x23, 0x59, 0xf4, 0xad, 0x57, 0x8d, 0xb2, 0x44, 0xe0,
	0x4f, 0xa1, 0x59, 0x5d, 0x3f, 0xa7, 0x89, 0xb2, 0xf3, 0xbd, 0x35, 0x82, 0xcc, 0x5a, 0x95, 0x7e,
	0x4c, 0x93, 0x24, 0x8c, 0xab, 0xb6, 0xab, 0xe2, 0x8f, 0x69, 0x72, 0xad, 0xb8, 0xfa, 0xf5, 0xe2,
	0x3a, 0x05, 0x6c, 0x5d, 0xe7, 0xaf, 0x35, 0x8e, 0xfe, 0xa5, 0xf1, 0x83, 0x2b, 0x61, 0x6b, 0xff,
	0x24, 0xac, 0x2a, 0xab, 0x02, 0xf7, 0x9f, 0x82, 0xee, 0xd0, 0xdc, 0x7f, 0xf2, 0x3a, 0x9a, 0xbc,
	0xd6, 0x5d, 0xe8, 0xea, 0xae, 0x05, 0x6c, 0x1d, 0xb1, 0x84, 0xc5, 0x53, 0x16, 0xfb, 0xcb, 0x71,
	0x18, 0x3f, 0xc3, 0x77, 0xa0, 0x91, 0xd0, 0x94, 0xc5, 0xb9, 0xfa, 0x0b, 0x51, 0x11, 0xbe, 0x0d,
	0xba, 0xff, 0x24, 0x8c, 0xca, 0x87, 0x6c, 0x91, 0x32, 0xc0, 0x6f, 0x00, 0xf8, 0x34, 0x8a, 0x3c,
	0x9f, 0x2f, 0xe2, 0x5c, 0xbe, 0x54, 0x8d, 0x58, 0x62, 0xe7, 0x50, 0x6c, 0x88, 0x64, 0x19, 0x5f,
	0xa4, 0x3e, 0x93, 0x9f, 0x10, 0x8b, 0xa8, 0xe8, 0xfe, 0x47, 0x60, 0xad, 0xbe, 0x41, 0x18, 0xa0,
	0x71, 0x7a, 0x46, 0xdc, 0x93, 0x8f, 0xdb, 0x1b, 0xd8, 0x04, 0xcd, 0x99, 0x4c, 0xc6, 0x6d, 0x84,
	0x2d, 0xd0, 0xdd, 0x93, 0xb3, 0x83, 0x87, 0xed, 0x1a, 0x6e, 0x82, 0x31, 0x1a, 0x4f, 0x1e, 0x8b,
	0xa0, 0x2e, 0xd0, 0x8e, 0x7b, 0xf2, 0x98, 0x7c, 0xd5, 0xd6, 0xee, 0xbf, 0x03, 0xcd, 0x97, 0xfe,
	0x17, 0x71, 0x0b, 0xcc, 0xc3, 0x4f, 0xdc, 0xf1, 0x91, 0x37, 0x19, 0xb5, 0x37, 0x70, 0x1b, 0x5a,
	0xa3, 0xc9, 0x78, 0x3c, 0xf9, 0xf2, 0xd4, 0x1b, 0x91, 0xc9, 0x71, 0x1b, 0x39, 0xbb, 0xcf, 0x2f,
	0x77, 0xd0, 0x2f, 0x97, 0x3b, 0xe8, 0xcf, 0xcb, 0x1d, 0x04, 0xdb, 0x21, 0x57, 0x1a, 0x89, 0x7f,
	0xab, 0x30, 0x0e, 0x94, 0x54, 0x5f, 0xeb, 0xf2, 0x7b, 0x7e, 0xde, 0x90, 0xef, 0xf3, 0xbd, 0xbf,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x45, 0x11, 0xa2, 0xdf, 0x07, 0x00, 0x00,
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	offset -= sovModel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func sovModel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModel        = jaegerIdlModel.ErrInvalidLengthModel
	ErrIntOverflowModel          = jaegerIdlModel.ErrIntOverflowModel
	ErrUnexpectedEndOfGroupModel = jaegerIdlModel.ErrUnexpectedEndOfGroupModel
)
