// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sampling.proto

package api_v2

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	math_bits "math/bits"
	jaegerIdlModel "github.com/jaegertracing/jaeger-idl/proto-gen/api_v2"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// See description of the SamplingStrategyResponse.strategyType field.
type SamplingStrategyType = jaegerIdlModel.SamplingStrategyType

const (
	SamplingStrategyType_PROBABILISTIC SamplingStrategyType = 0
	SamplingStrategyType_RATE_LIMITING SamplingStrategyType = 1
)

var SamplingStrategyType_name = jaegerIdlModel.SamplingStrategyType_name

var SamplingStrategyType_value = jaegerIdlModel.SamplingStrategyType_value



// ProbabilisticSamplingStrategy samples traces with a fixed probability.
type ProbabilisticSamplingStrategy = jaegerIdlModel.ProbabilisticSamplingStrategy



var xxx_messageInfo_ProbabilisticSamplingStrategy proto.InternalMessageInfo


// RateLimitingSamplingStrategy samples a fixed number of traces per time interval.
// The typical implementations use the leaky bucket algorithm.
type RateLimitingSamplingStrategy = jaegerIdlModel.RateLimitingSamplingStrategy



var xxx_messageInfo_RateLimitingSamplingStrategy proto.InternalMessageInfo


// OperationSamplingStrategy is a sampling strategy for a given operation
// (aka endpoint, span name). Only probabilistic sampling is currently supported.
type OperationSamplingStrategy = jaegerIdlModel.OperationSamplingStrategy



var xxx_messageInfo_OperationSamplingStrategy proto.InternalMessageInfo



// PerOperationSamplingStrategies is a combination of strategies for different endpoints
// as well as some service-wide defaults. It is particularly useful for services whose
// endpoints receive vastly different traffic, so that any single rate of sampling would
// result in either too much data for some endpoints or almost no data for other endpoints.
type PerOperationSamplingStrategies = jaegerIdlModel.PerOperationSamplingStrategies




// SamplingStrategyResponse contains an overall sampling strategy for a given service.
// This type should = jaegerIdlModel.should as a union where only one of the strategy field is present.
type SamplingStrategyResponse = jaegerIdlModel.SamplingStrategyResponse



// SamplingStrategyParameters defines request parameters for remote sampler.
type SamplingStrategyParameters = jaegerIdlModel.SamplingStrategyParameters



var xxx_messageInfo_SamplingStrategyParameters proto.InternalMessageInfo



func init() {
	//proto.RegisterEnum("jaeger.api_v2.SamplingStrategyType", SamplingStrategyType_name, SamplingStrategyType_value)
	proto.RegisterType((*ProbabilisticSamplingStrategy)(nil), "jaeger.api_v2.ProbabilisticSamplingStrategy")
	proto.RegisterType((*RateLimitingSamplingStrategy)(nil), "jaeger.api_v2.RateLimitingSamplingStrategy")
	proto.RegisterType((*OperationSamplingStrategy)(nil), "jaeger.api_v2.OperationSamplingStrategy")
	proto.RegisterType((*PerOperationSamplingStrategies)(nil), "jaeger.api_v2.PerOperationSamplingStrategies")
	proto.RegisterType((*SamplingStrategyResponse)(nil), "jaeger.api_v2.SamplingStrategyResponse")
	proto.RegisterType((*SamplingStrategyParameters)(nil), "jaeger.api_v2.SamplingStrategyParameters")
}

func init() { proto.RegisterFile("sampling.proto", fileDescriptor_79c798842d009798) }

var fileDescriptor_79c798842d009798 = []byte{
	// 569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x41, 0x6f, 0x12, 0x41,
	0x14, 0x76, 0x40, 0x9b, 0xf4, 0xd1, 0xd6, 0x76, 0xac, 0xba, 0x12, 0x4a, 0xc8, 0xf6, 0x20, 0x56,
	0x0b, 0xc9, 0x7a, 0x33, 0xa6, 0x49, 0x69, 0x0c, 0x59, 0x43, 0x29, 0x59, 0xf0, 0xa2, 0x07, 0x1c,
	0xe0, 0xb9, 0x19, 0x03, 0x3b, 0x9b, 0x99, 0x29, 0xca, 0xd5, 0xc4, 0xab, 0x17, 0xcf, 0x5e, 0xfc,
	0x35, 0x1e, 0x4d, 0xbc, 0x79, 0x32, 0xc4, 0x1f, 0x62, 0x76, 0x59, 0x5a, 0x58, 0x16, 0xb8, 0x79,
	0xda, 0xcd, 0x7b, 0xdf, 0x7c, 0xdf, 0xf7, 0xde, 0xbc, 0x79, 0xb0, 0xa3, 0xd8, 0xc0, 0xef, 0x73,
	0xcf, 0x2d, 0xf9, 0x52, 0x68, 0x41, 0xb7, 0xdf, 0x33, 0x74, 0x51, 0x96, 0x98, 0xcf, 0xdb, 0x43,
	0x2b, 0xbb, 0xef, 0x0a, 0x57, 0x84, 0x99, 0x72, 0xf0, 0x37, 0x01, 0x65, 0x73, 0xae, 0x10, 0x6e,
	0x1f, 0xcb, 0xcc, 0xe7, 0x65, 0xe6, 0x79, 0x42, 0x33, 0xcd, 0x85, 0xa7, 0x26, 0x59, 0xf3, 0x0c,
	0x0e, 0x1a, 0x52, 0x74, 0x58, 0x87, 0xf7, 0xb9, 0xd2, 0xbc, 0xdb, 0x8c, 0x14, 0x9a, 0x5a, 0x32,
	0x8d, 0xee, 0x88, 0x9a, 0xb0, 0x35, 0x55, 0x75, 0x98, 0x46, 0x83, 0x14, 0x48, 0x91, 0x38, 0x73,
	0x31, 0xb3, 0x0e, 0xb9, 0xe0, 0x5b, 0xe3, 0x03, 0xae, 0x83, 0xb3, 0x71, 0x8e, 0x12, 0xd0, 0x01,
	0xfb, 0xd8, 0x92, 0xac, 0x8b, 0xaa, 0x81, 0xb2, 0x89, 0x5d, 0xe1, 0xf5, 0x42, 0xa6, 0x5b, 0x4e,
	0x42, 0xc6, 0xfc, 0x46, 0xe0, 0xc1, 0x85, 0x8f, 0x32, 0x74, 0xba, 0xc0, 0x96, 0x83, 0x4d, 0x31,
	0x4d, 0x86, 0x24, 0x9b, 0xce, 0x75, 0x80, 0x76, 0xe0, 0xae, 0x9f, 0x54, 0x90, 0x91, 0x2a, 0x90,
	0x62, 0xc6, 0x7a, 0x52, 0x9a, 0xeb, 0x59, 0x69, 0x65, 0xf1, 0x4e, 0x32, 0x95, 0xf9, 0x3b, 0x05,
	0xf9, 0x06, 0xca, 0x65, 0x16, 0x39, 0x2a, 0x7a, 0x02, 0xd9, 0x1e, 0xbe, 0x63, 0x97, 0x7d, 0x3d,
	0x4d, 0x5e, 0x29, 0xe9, 0x51, 0xd4, 0xc4, 0x15, 0x08, 0xfa, 0x12, 0x0a, 0x51, 0xb6, 0x26, 0x3e,
	0xa0, 0xac, 0x88, 0x4b, 0xaf, 0x17, 0x6f, 0x60, 0x2a, 0x64, 0x59, 0x8b, 0xa3, 0x6f, 0xe1, 0x9e,
	0x3f, 0xeb, 0xf6, 0xca, 0xa5, 0x91, 0x2e, 0xa4, 0x8b, 0x19, 0xab, 0x18, 0xeb, 0xc9, 0xd2, 0xd6,
	0x3b, 0x4b, 0x78, 0x66, 0xdc, 0xbe, 0xf2, 0xfd, 0x25, 0x6e, 0x6f, 0xce, 0xb9, 0x5d, 0x8a, 0x33,
	0x3f, 0xa7, 0xc1, 0x58, 0x10, 0x46, 0xe5, 0x0b, 0x4f, 0x21, 0xad, 0xc2, 0x96, 0x8a, 0x62, 0xad,
	0x91, 0x3f, 0x99, 0xc6, 0x1d, 0xeb, 0x30, 0x56, 0x40, 0xfc, 0x78, 0x00, 0x75, 0xe6, 0x0e, 0xfe,
	0x8f, 0x31, 0xa1, 0x6d, 0xd8, 0x97, 0x09, 0xcf, 0xc2, 0x48, 0x87, 0x12, 0x8f, 0x63, 0x12, 0xab,
	0x5e, 0x90, 0x93, 0x48, 0x44, 0xdf, 0xc0, 0x9e, 0x88, 0xdf, 0x55, 0xd8, 0xe7, 0x8c, 0x75, 0x1c,
	0x2f, 0x60, 0xe5, 0xb8, 0x3a, 0x8b, 0x3c, 0xe6, 0x09, 0x64, 0xe3, 0x36, 0x1a, 0x4c, 0xb2, 0x01,
	0x6a, 0x94, 0x8a, 0x16, 0x20, 0xa3, 0x50, 0x0e, 0x79, 0x17, 0xeb, 0x6c, 0x80, 0xd1, 0x33, 0x9c,
	0x0d, 0x1d, 0x3d, 0x87, 0xfd, 0xa4, 0x7b, 0xa0, 0x7b, 0xb0, 0xdd, 0x70, 0x2e, 0x2a, 0xa7, 0x15,
	0xbb, 0x66, 0x37, 0x5b, 0xf6, 0xd9, 0xee, 0x8d, 0x20, 0xe4, 0x9c, 0xb6, 0x5e, 0xb4, 0x6b, 0xf6,
	0xb9, 0xdd, 0xb2, 0xeb, 0xd5, 0x5d, 0x62, 0x7d, 0x27, 0x70, 0x7b, 0x7a, 0xfc, 0x9c, 0x79, 0xcc,
	0x45, 0x49, 0xbf, 0x10, 0xb8, 0x53, 0x45, 0xbd, 0xb0, 0x10, 0x1e, 0xad, 0xb9, 0xfe, 0x6b, 0xdb,
	0xd9, 0x87, 0x6b, 0xa0, 0xd3, 0x41, 0x33, 0x0f, 0x3f, 0xfd, 0xfa, 0xfb, 0x35, 0x75, 0x60, 0x1a,
	0xe1, 0xde, 0x1c, 0x5a, 0x65, 0x15, 0x43, 0x3e, 0x23, 0x47, 0x95, 0xe3, 0x1f, 0xe3, 0x3c, 0xf9,
	0x39, 0xce, 0x93, 0x3f, 0xe3, 0x3c, 0x81, 0xfb, 0x5c, 0x44, 0xec, 0x5a, 0xb2, 0x6e, 0xb0, 0xa5,
	0x27, 0x22, 0xaf, 0x37, 0x26, 0xdf, 0xce, 0x46, 0xb8, 0x72, 0x9f, 0xfe, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0xf1, 0xcc, 0x49, 0x9b, 0xc7, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SamplingManagerClient is the client API for SamplingManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SamplingManagerClient = jaegerIdlModel.SamplingManagerClient


type samplingManagerClient struct {
	cc *grpc.ClientConn
}


func NewSamplingManagerClient(cc *grpc.ClientConn) SamplingManagerClient {
	return jaegerIdlModel.NewSamplingManagerClient(cc)
}

func (c *samplingManagerClient) GetSamplingStrategy(ctx context.Context, in *SamplingStrategyParameters, opts ...grpc.CallOption) (*SamplingStrategyResponse, error) {
	out := new(SamplingStrategyResponse)
	err := c.cc.Invoke(ctx, "/jaeger.api_v2.SamplingManager/GetSamplingStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SamplingManagerServer is the server API for SamplingManager service.
type SamplingManagerServer = jaegerIdlModel.SamplingManagerServer

// UnimplementedSamplingManagerServer can be embedded to have forward compatible implementations.
type UnimplementedSamplingManagerServer = jaegerIdlModel.UnimplementedSamplingManagerServer




func RegisterSamplingManagerServer(s *grpc.Server, srv SamplingManagerServer) {
	jaegerIdlModel.RegisterSamplingManagerServer(s, srv)
}

func _SamplingManager_GetSamplingStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SamplingStrategyParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplingManagerServer).GetSamplingStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.api_v2.SamplingManager/GetSamplingStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplingManagerServer).GetSamplingStrategy(ctx, req.(*SamplingStrategyParameters))
	}
	return interceptor(ctx, in, info, handler)
}

var _SamplingManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.api_v2.SamplingManager",
	HandlerType: (*SamplingManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSamplingStrategy",
			Handler:    _SamplingManager_GetSamplingStrategy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sampling.proto",
}



func encodeVarintSampling(dAtA []byte, offset int, v uint64) int {
	offset -= sovSampling(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}


func sovSampling(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSampling(x uint64) (n int) {
	return sovSampling(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func skipSampling(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSampling
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSampling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSampling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSampling
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSampling
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSampling
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSampling        = jaegerIdlModel.ErrInvalidLengthSampling
	ErrIntOverflowSampling          = jaegerIdlModel.ErrIntOverflowSampling
	ErrUnexpectedEndOfGroupSampling = jaegerIdlModel.ErrUnexpectedEndOfGroupSampling
)
